// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Projeto_Aplicado_II_API.Infrastructure.Context;

#nullable disable

namespace Projeto_Aplicado_II_API.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchSizeId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_size_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("city");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("number");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("street");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BranchSizeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BranchSizeId = 1L,
                            City = "Cidade Exemplo",
                            CompanyId = 1L,
                            Country = "Brasil",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Filial Padrão 1",
                            Neighborhood = "Bairro Exemplo",
                            Number = "11",
                            State = "EX",
                            Street = "Rua Exemplo 1"
                        },
                        new
                        {
                            Id = 2L,
                            BranchSizeId = 2L,
                            City = "Cidade Exemplo",
                            CompanyId = 1L,
                            Country = "Brasil",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Filial Padrão 2",
                            Neighborhood = "Bairro Exemplo",
                            Number = "21",
                            State = "EX",
                            Street = "Rua Exemplo 2"
                        },
                        new
                        {
                            Id = 3L,
                            BranchSizeId = 3L,
                            City = "Cidade Exemplo",
                            CompanyId = 1L,
                            Country = "Brasil",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "Filial Padrão 3",
                            Neighborhood = "Bairro Exemplo",
                            Number = "31",
                            State = "EX",
                            Street = "Rua Exemplo 3"
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.BranchSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("branch_size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Pequena"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Média"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Grande"
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("city");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<string>("Country")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("last_name");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("number");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("street");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("tax_id")
                        .HasComment("CPF");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("business_name")
                        .HasComment("Nome Fantasia");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("legal_name")
                        .HasComment("Razão Social");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("phone");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("tax_id")
                        .HasComment("CNPJ");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TaxId")
                        .IsUnique();

                    b.ToTable("company", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BusinessName = "Empresa Padrão LTDA",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "empresa.padrao@company.com",
                            IsActive = true,
                            LegalName = "Empresa Padrão",
                            Phone = "55 47 0001-0001",
                            TaxId = "00.000.000/0001-01"
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Ean13BarCode")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nchar(13)")
                        .HasColumnName("ean_13_bar_code")
                        .IsFixedLength();

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("MinimalInventoryQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10)
                        .HasColumnName("minimal_inventory_quantity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_category_id");

                    b.Property<decimal>("UnitarySellingPrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("unitary_selling_price");

                    b.Property<long>("UnityOfMeasureId")
                        .HasColumnType("bigint")
                        .HasColumnName("unity_of_measure_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Ean13BarCode")
                        .IsUnique();

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("UnityOfMeasureId");

                    b.ToTable("product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ean13BarCode = "7890000010016",
                            ImageUrl = "https://d8vlg9z1oftyc.cloudfront.net/minhacooper/image/product/152c5248ec73694bf1cf8be92c1d8e4720240227033525/450/banana-prata-kg_2019.jpg",
                            IsActive = true,
                            MinimalInventoryQuantity = 10,
                            Name = "Banana Prata",
                            ProductCategoryId = 1L,
                            UnitarySellingPrice = 6.89m,
                            UnityOfMeasureId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            CompanyId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ean13BarCode = "7890000010026",
                            ImageUrl = "https://d8vlg9z1oftyc.cloudfront.net/minhacooper/image/product/fb1a588af874d79db3c0c6ae8512a83e20240226225359/450/batata-inglesa-lavada-kg_7172.jpg",
                            IsActive = true,
                            MinimalInventoryQuantity = 10,
                            Name = "Batata Inglesa Lavada",
                            ProductCategoryId = 1L,
                            UnitarySellingPrice = 5.98m,
                            UnityOfMeasureId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CompanyId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ean13BarCode = "7890000010036",
                            ImageUrl = "https://d8vlg9z1oftyc.cloudfront.net/minhacooper/image/product/d72ca3f78b35715d1308a4cb6a6fcba220250520141235/450/suco-integral-laranja-prats-garrafa-1-5l_2294.jpg",
                            IsActive = true,
                            MinimalInventoryQuantity = 10,
                            Name = "Suco Integral Laranja Prat's Garrafa 1,5l",
                            ProductCategoryId = 2L,
                            UnitarySellingPrice = 23.99m,
                            UnityOfMeasureId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CompanyId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ean13BarCode = "7890000010046",
                            ImageUrl = "https://d8vlg9z1oftyc.cloudfront.net/minhacooper/image/product/e7e4a170a063c2102b4470ce991b714a20250409101224/450/vinho-chileno-cabernet-sauvignon-montes-reserva-garrafa-750ml_8040.jpg",
                            IsActive = true,
                            MinimalInventoryQuantity = 10,
                            Name = "Vinho Chileno Cabernet Sauvignon Montes Reserva Garrafa 750ml",
                            ProductCategoryId = 2L,
                            UnitarySellingPrice = 99.90m,
                            UnityOfMeasureId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CompanyId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ean13BarCode = "7890000010056",
                            ImageUrl = "https://d8vlg9z1oftyc.cloudfront.net/minhacooper/image/product/620ec78bf82c5deb224d95c0544a8f1e20250514171231/450/costela-bovina-precoce-verdi-kg_2380.jpg",
                            IsActive = true,
                            MinimalInventoryQuantity = 10,
                            Name = "Costela Bovina Precoce Verdi",
                            ProductCategoryId = 3L,
                            UnitarySellingPrice = 36.98m,
                            UnityOfMeasureId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CompanyId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ean13BarCode = "7890000010066",
                            ImageUrl = "https://d8vlg9z1oftyc.cloudfront.net/minhacooper/image/product/8e15f72024db65d4faac6f3f07b2777920250509081238/450/file-simples-bovino-precoce-verdi-kg_4970.jpg",
                            IsActive = true,
                            MinimalInventoryQuantity = 10,
                            Name = "Filé Simples Bovino Precoce Verdi",
                            ProductCategoryId = 3L,
                            UnitarySellingPrice = 47.90m,
                            UnityOfMeasureId = 2L
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("product_category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CompanyId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hortifruti"
                        },
                        new
                        {
                            Id = 2L,
                            CompanyId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bebidas"
                        },
                        new
                        {
                            Id = 3L,
                            CompanyId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Carnes, Aves e Peixes"
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.ProductInInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("branch_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsSold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_sold");

                    b.Property<DateOnly>("ManufacturingDate")
                        .HasColumnType("date");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("product_in_inventory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 9L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 10L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 1L,
                            SupplierId = 1L
                        },
                        new
                        {
                            Id = 11L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 15L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 16L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 17L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 18L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 19L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 20L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 2L,
                            SupplierId = 2L
                        },
                        new
                        {
                            Id = 21L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 22L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 23L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 24L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 25L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 26L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 27L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 28L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 29L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 30L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 3L,
                            SupplierId = 3L
                        },
                        new
                        {
                            Id = 31L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 32L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 33L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 34L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 35L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 36L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 37L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 38L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 39L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 40L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 4L,
                            SupplierId = 4L
                        },
                        new
                        {
                            Id = 41L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 42L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 43L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 44L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 45L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 46L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 47L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 48L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 49L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 50L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 5L,
                            SupplierId = 5L
                        },
                        new
                        {
                            Id = 51L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        },
                        new
                        {
                            Id = 52L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        },
                        new
                        {
                            Id = 53L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        },
                        new
                        {
                            Id = 54L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        },
                        new
                        {
                            Id = 55L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        },
                        new
                        {
                            Id = 56L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        },
                        new
                        {
                            Id = 57L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        },
                        new
                        {
                            Id = 58L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        },
                        new
                        {
                            Id = 59L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        },
                        new
                        {
                            Id = 60L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsSold = false,
                            ManufacturingDate = new DateOnly(1, 1, 1),
                            ProductId = 6L,
                            SupplierId = 6L
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SupplierId");

                    b.ToTable("sale", (string)null);
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.SaleItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<long>("SaleId")
                        .HasColumnType("bigint")
                        .HasColumnName("sale_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("sale_item", (string)null);
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("business_name");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("city");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("legal_name");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("number");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("street");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tax_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("supplier", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BusinessName = "Fornecedor Padrão 1",
                            City = "Cidade Exemplo",
                            CompanyId = 1L,
                            Country = "Brasil",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fornecedor.padrao1@supplier.com",
                            IsActive = true,
                            LegalName = "Fornecedor Padrão 1",
                            Neighborhood = "Bairro Exemplo",
                            Number = "12",
                            Phone = "55 47 0001-0002",
                            State = "EX",
                            Street = "Rua Exemplo 1",
                            TaxId = "00.000.000/0001-02"
                        },
                        new
                        {
                            Id = 2L,
                            BusinessName = "Fornecedor Padrão 2",
                            City = "Cidade Exemplo",
                            CompanyId = 1L,
                            Country = "Brasil",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fornecedor.padrao2@supplier.com",
                            IsActive = true,
                            LegalName = "Fornecedor Padrão 2",
                            Neighborhood = "Bairro Exemplo",
                            Number = "22",
                            Phone = "55 47 0002-0002",
                            State = "EX",
                            Street = "Rua Exemplo 2",
                            TaxId = "00.000.000/0002-02"
                        },
                        new
                        {
                            Id = 3L,
                            BusinessName = "Fornecedor Padrão 3",
                            City = "Cidade Exemplo",
                            CompanyId = 1L,
                            Country = "Brasil",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fornecedor.padrao3@supplier.com",
                            IsActive = true,
                            LegalName = "Fornecedor Padrão 3",
                            Neighborhood = "Bairro Exemplo",
                            Number = "32",
                            Phone = "55 47 0003-0002",
                            State = "EX",
                            Street = "Rua Exemplo 3",
                            TaxId = "00.000.000/0003-02"
                        },
                        new
                        {
                            Id = 4L,
                            BusinessName = "Fornecedor Padrão 4",
                            City = "Cidade Exemplo",
                            CompanyId = 1L,
                            Country = "Brasil",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fornecedor.padrao4@supplier.com",
                            IsActive = true,
                            LegalName = "Fornecedor Padrão 4",
                            Neighborhood = "Bairro Exemplo",
                            Number = "42",
                            Phone = "55 47 0004-0002",
                            State = "EX",
                            Street = "Rua Exemplo 4",
                            TaxId = "00.000.000/0004-02"
                        },
                        new
                        {
                            Id = 5L,
                            BusinessName = "Fornecedor Padrão 5",
                            City = "Cidade Exemplo",
                            CompanyId = 1L,
                            Country = "Brasil",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fornecedor.padrao5@supplier.com",
                            IsActive = true,
                            LegalName = "Fornecedor Padrão 5",
                            Neighborhood = "Bairro Exemplo",
                            Number = "52",
                            Phone = "55 47 0005-0002",
                            State = "EX",
                            Street = "Rua Exemplo 5",
                            TaxId = "00.000.000/0005-02"
                        },
                        new
                        {
                            Id = 6L,
                            BusinessName = "Fornecedor Padrão 6",
                            City = "Cidade Exemplo",
                            CompanyId = 1L,
                            Country = "Brasil",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fornecedor.padrao6@supplier.com",
                            IsActive = true,
                            LegalName = "Fornecedor Padrão 6",
                            Neighborhood = "Bairro Exemplo",
                            Number = "62",
                            Phone = "55 47 0006-0002",
                            State = "EX",
                            Street = "Rua Exemplo 6",
                            TaxId = "00.000.000/0006-02"
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.SupplierProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("UnitaryPrice")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("unitary_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId", "ProductId")
                        .IsUnique();

                    b.ToTable("supplier_product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1L,
                            SupplierId = 1L,
                            UnitaryPrice = 0m
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2L,
                            SupplierId = 2L,
                            UnitaryPrice = 0m
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3L,
                            SupplierId = 3L,
                            UnitaryPrice = 0m
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4L,
                            SupplierId = 4L,
                            UnitaryPrice = 0m
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5L,
                            SupplierId = 5L,
                            UnitaryPrice = 0m
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 6L,
                            SupplierId = 6L,
                            UnitaryPrice = 0m
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.UnityOfMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("unity_of_measure", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Unidade",
                            Symbol = "UN"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quilograma",
                            Symbol = "kg"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Grama",
                            Symbol = "g"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Miligrama",
                            Symbol = "mg"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Litro",
                            Symbol = "L"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mililitro",
                            Symbol = "mL"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Quilômetro",
                            Symbol = "km"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Metro",
                            Symbol = "m"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Milímetro",
                            Symbol = "ml"
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("binary(32)")
                        .HasColumnName("password_hash")
                        .IsFixedLength();

                    b.Property<byte[]>("PasswordSaltHash")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("binary(16)")
                        .HasColumnName("password_salt_hash")
                        .IsFixedLength();

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@admin.com",
                            IsActive = true,
                            IsAdmin = true,
                            Name = "Admin",
                            PasswordHash = new byte[] { 106, 81, 44, 80, 75, 157, 220, 207, 185, 250, 202, 13, 10, 59, 117, 138, 172, 230, 74, 223, 189, 1, 152, 66, 146, 180, 174, 9, 104, 9, 3, 126 },
                            PasswordSaltHash = new byte[] { 99, 212, 93, 197, 93, 127, 86, 151, 50, 94, 80, 108, 64, 232, 22, 152 }
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.UserBranch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint")
                        .HasColumnName("company_id");

                    b.Property<long?>("BranchId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BranchId1");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId", "BranchId")
                        .IsUnique();

                    b.ToTable("user_branch", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BranchId = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            BranchId = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            BranchId = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Branch", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.BranchSize", "BranchSize")
                        .WithMany("Branches")
                        .HasForeignKey("BranchSizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchSize");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Client", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Product", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.UnityOfMeasure", "UnityOfMeasure")
                        .WithMany("Products")
                        .HasForeignKey("UnityOfMeasureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ProductCategory");

                    b.Navigation("UnityOfMeasure");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.ProductCategory", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.Company", "Company")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.ProductInInventory", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.Branch", "Branch")
                        .WithMany("ProductsInInventory")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.Product", "Product")
                        .WithMany("ProductsInInventory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Sale", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.Client", "Client")
                        .WithMany("Sales")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Projeto_Aplicado_II_API.Entities.Supplier", "Supplier")
                        .WithMany("Sales")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Client");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.SaleItem", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.Product", "Product")
                        .WithMany("SaleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Supplier", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.SupplierProduct", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.UserBranch", b =>
                {
                    b.HasOne("Projeto_Aplicado_II_API.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.Branch", null)
                        .WithMany("UserBranches")
                        .HasForeignKey("BranchId1");

                    b.HasOne("Projeto_Aplicado_II_API.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Projeto_Aplicado_II_API.Entities.User", null)
                        .WithMany("UserBranches")
                        .HasForeignKey("UserId1");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Branch", b =>
                {
                    b.Navigation("ProductsInInventory");

                    b.Navigation("UserBranches");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.BranchSize", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Client", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Company", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("ProductCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Product", b =>
                {
                    b.Navigation("ProductsInInventory");

                    b.Navigation("SaleItems");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.Supplier", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.UnityOfMeasure", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Projeto_Aplicado_II_API.Entities.User", b =>
                {
                    b.Navigation("UserBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
